# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  backend:
    build: ./backend
    container_name: syslab-django
    image: syslab-backend:latest
    ports:
      - 8000:8000
      - 35729:35729
    environment:
      - ENVIROMENT=development
      - DATABASE_ENGINE=postgresql
      - POSTGRES_DB=db.syslab
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db  # Asegura que Django use el servicio "db"
      - POSTGRES_PORT=5432
    env_file:
     - .env
    volumes:
      - ./backend:/app
      - frontend-dist:/app/static/frontend
      # - syslab-staticfiles:/app/staticfiles
    command: bash -c "python manage.py migrate --noinput & python manage.py runserver 0.0.0.0:8000"
    # command: bash -c "python manage.py livereload & python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy  # Espera a que PostgreSQL esté listo
    
  frontend:
    build: ./frontend
    container_name: syslab-react
    image: syslab-frontend:latest
    volumes:
      - ./frontend:/app
      - frontend-dist:/app/dist
    command: npm run dev
    environment:
      - CHOKIDAR_USEPOLLING=true  # Habilitar el polling para hot reload en contenedores

  db:
    image: postgres:latest
    container_name: postgres_db
    environment:
      - POSTGRES_DB=db.syslab
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - syslab-postgres:/var/lib/postgresql/data  # Persistencia
    healthcheck:  # Verifica que PostgreSQL esté listo antes de que Django inicie
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  syslab-postgres:
  syslab-staticfiles:
  frontend-dist:


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

